// Code generated by protoc-gen-go. DO NOT EDIT.
// source: weather.proto

package weather

import (
	context "context"
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type WeatherRequest struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WeatherRequest) Reset()         { *m = WeatherRequest{} }
func (m *WeatherRequest) String() string { return proto.CompactTextString(m) }
func (*WeatherRequest) ProtoMessage()    {}
func (*WeatherRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_231dcd72b885f4be, []int{0}
}

func (m *WeatherRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WeatherRequest.Unmarshal(m, b)
}
func (m *WeatherRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WeatherRequest.Marshal(b, m, deterministic)
}
func (m *WeatherRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WeatherRequest.Merge(m, src)
}
func (m *WeatherRequest) XXX_Size() int {
	return xxx_messageInfo_WeatherRequest.Size(m)
}
func (m *WeatherRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WeatherRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WeatherRequest proto.InternalMessageInfo

func (m *WeatherRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type Weather struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Main                 string   `protobuf:"bytes,2,opt,name=main,proto3" json:"main,omitempty"`
	Description          string   `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Icon                 string   `protobuf:"bytes,4,opt,name=icon,proto3" json:"icon,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Weather) Reset()         { *m = Weather{} }
func (m *Weather) String() string { return proto.CompactTextString(m) }
func (*Weather) ProtoMessage()    {}
func (*Weather) Descriptor() ([]byte, []int) {
	return fileDescriptor_231dcd72b885f4be, []int{1}
}

func (m *Weather) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Weather.Unmarshal(m, b)
}
func (m *Weather) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Weather.Marshal(b, m, deterministic)
}
func (m *Weather) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Weather.Merge(m, src)
}
func (m *Weather) XXX_Size() int {
	return xxx_messageInfo_Weather.Size(m)
}
func (m *Weather) XXX_DiscardUnknown() {
	xxx_messageInfo_Weather.DiscardUnknown(m)
}

var xxx_messageInfo_Weather proto.InternalMessageInfo

func (m *Weather) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Weather) GetMain() string {
	if m != nil {
		return m.Main
	}
	return ""
}

func (m *Weather) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Weather) GetIcon() string {
	if m != nil {
		return m.Icon
	}
	return ""
}

func init() {
	proto.RegisterType((*WeatherRequest)(nil), "weather.WeatherRequest")
	proto.RegisterType((*Weather)(nil), "weather.Weather")
}

func init() {
	proto.RegisterFile("weather.proto", fileDescriptor_231dcd72b885f4be)
}

var fileDescriptor_231dcd72b885f4be = []byte{
	// 184 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2d, 0x4f, 0x4d, 0x2c,
	0xc9, 0x48, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x87, 0x72, 0x95, 0x14, 0xb8,
	0xf8, 0xc2, 0x21, 0xcc, 0xa0, 0xd4, 0xc2, 0xd2, 0xd4, 0xe2, 0x12, 0x21, 0x3e, 0x2e, 0xa6, 0xcc,
	0x14, 0x09, 0x46, 0x05, 0x46, 0x0d, 0xe6, 0x20, 0xa6, 0xcc, 0x14, 0xa5, 0x64, 0x2e, 0x76, 0xa8,
	0x0a, 0x74, 0x29, 0x21, 0x21, 0x2e, 0x96, 0xdc, 0xc4, 0xcc, 0x3c, 0x09, 0x26, 0x05, 0x46, 0x0d,
	0xce, 0x20, 0x30, 0x5b, 0x48, 0x81, 0x8b, 0x3b, 0x25, 0xb5, 0x38, 0xb9, 0x28, 0xb3, 0xa0, 0x24,
	0x33, 0x3f, 0x4f, 0x82, 0x19, 0x2c, 0x85, 0x2c, 0x04, 0xd2, 0x95, 0x99, 0x9c, 0x9f, 0x27, 0xc1,
	0x02, 0xd1, 0x05, 0x62, 0x1b, 0x75, 0x31, 0xc2, 0xdd, 0x11, 0x9c, 0x5a, 0x54, 0x96, 0x99, 0x9c,
	0x2a, 0x64, 0xc9, 0xc5, 0xe5, 0x9e, 0x5a, 0x02, 0xb3, 0x5a, 0x5c, 0x0f, 0xe6, 0x01, 0x54, 0xe7,
	0x4a, 0x09, 0xa0, 0x4b, 0x28, 0x31, 0x08, 0xd9, 0x72, 0xf1, 0xf8, 0x64, 0x16, 0xc3, 0xf4, 0x16,
	0x93, 0xa4, 0xd9, 0x80, 0x31, 0x89, 0x0d, 0x1c, 0x46, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x47, 0x9a, 0xc1, 0x62, 0x34, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// WeatherServiceClient is the client API for WeatherService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WeatherServiceClient interface {
	GetWeather(ctx context.Context, in *WeatherRequest, opts ...grpc.CallOption) (*Weather, error)
	ListWeathers(ctx context.Context, in *WeatherRequest, opts ...grpc.CallOption) (WeatherService_ListWeathersClient, error)
}

type weatherServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWeatherServiceClient(cc grpc.ClientConnInterface) WeatherServiceClient {
	return &weatherServiceClient{cc}
}

func (c *weatherServiceClient) GetWeather(ctx context.Context, in *WeatherRequest, opts ...grpc.CallOption) (*Weather, error) {
	out := new(Weather)
	err := c.cc.Invoke(ctx, "/weather.WeatherService/GetWeather", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weatherServiceClient) ListWeathers(ctx context.Context, in *WeatherRequest, opts ...grpc.CallOption) (WeatherService_ListWeathersClient, error) {
	stream, err := c.cc.NewStream(ctx, &_WeatherService_serviceDesc.Streams[0], "/weather.WeatherService/ListWeathers", opts...)
	if err != nil {
		return nil, err
	}
	x := &weatherServiceListWeathersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WeatherService_ListWeathersClient interface {
	Recv() (*Weather, error)
	grpc.ClientStream
}

type weatherServiceListWeathersClient struct {
	grpc.ClientStream
}

func (x *weatherServiceListWeathersClient) Recv() (*Weather, error) {
	m := new(Weather)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// WeatherServiceServer is the server API for WeatherService service.
type WeatherServiceServer interface {
	GetWeather(context.Context, *WeatherRequest) (*Weather, error)
	ListWeathers(*WeatherRequest, WeatherService_ListWeathersServer) error
}

// UnimplementedWeatherServiceServer can be embedded to have forward compatible implementations.
type UnimplementedWeatherServiceServer struct {
}

func (*UnimplementedWeatherServiceServer) GetWeather(ctx context.Context, req *WeatherRequest) (*Weather, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWeather not implemented")
}
func (*UnimplementedWeatherServiceServer) ListWeathers(req *WeatherRequest, srv WeatherService_ListWeathersServer) error {
	return status.Errorf(codes.Unimplemented, "method ListWeathers not implemented")
}

func RegisterWeatherServiceServer(s *grpc.Server, srv WeatherServiceServer) {
	s.RegisterService(&_WeatherService_serviceDesc, srv)
}

func _WeatherService_GetWeather_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WeatherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeatherServiceServer).GetWeather(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/weather.WeatherService/GetWeather",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeatherServiceServer).GetWeather(ctx, req.(*WeatherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WeatherService_ListWeathers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WeatherRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WeatherServiceServer).ListWeathers(m, &weatherServiceListWeathersServer{stream})
}

type WeatherService_ListWeathersServer interface {
	Send(*Weather) error
	grpc.ServerStream
}

type weatherServiceListWeathersServer struct {
	grpc.ServerStream
}

func (x *weatherServiceListWeathersServer) Send(m *Weather) error {
	return x.ServerStream.SendMsg(m)
}

var _WeatherService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "weather.WeatherService",
	HandlerType: (*WeatherServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetWeather",
			Handler:    _WeatherService_GetWeather_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListWeathers",
			Handler:       _WeatherService_ListWeathers_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "weather.proto",
}
